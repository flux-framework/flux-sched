<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classFlux_1_1resource__model_1_1expr__eval__vtx__target__t" kind="class" language="C++" prot="public">
    <compoundname>Flux::resource_model::expr_eval_vtx_target_t</compoundname>
    <basecompoundref refid="classFlux_1_1resource__model_1_1expr__eval__target__base__t" prot="public" virt="non-virtual">Flux::resource_model::expr_eval_target_base_t</basecompoundref>
    <includes refid="expr__eval__vtx__target_8hpp" local="no">expr_eval_vtx_target.hpp</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classFlux_1_1resource__model_1_1expr__eval__vtx__target__t_1a24e0f52c2d44a80b652c617d790a6f42" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool Flux::resource_model::expr_eval_vtx_target_t::m_initialized</definition>
        <argsstring></argsstring>
        <name>m_initialized</name>
        <initializer>{false}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hobbs17/flux-sched/resource/evaluators/expr_eval_vtx_target.hpp" line="96" column="10" bodyfile="/home/hobbs17/flux-sched/resource/evaluators/expr_eval_vtx_target.hpp" bodystart="96" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classFlux_1_1resource__model_1_1expr__eval__vtx__target__t_1a46a472e8bb3ae5a5568311ee41f3abc8" prot="private" static="no" mutable="no">
        <type><ref refid="structFlux_1_1resource__model_1_1vtx__predicates__override__t" kindref="compound">vtx_predicates_override_t</ref></type>
        <definition>vtx_predicates_override_t Flux::resource_model::expr_eval_vtx_target_t::m_overridden</definition>
        <argsstring></argsstring>
        <name>m_overridden</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hobbs17/flux-sched/resource/evaluators/expr_eval_vtx_target.hpp" line="97" column="31" bodyfile="/home/hobbs17/flux-sched/resource/evaluators/expr_eval_vtx_target.hpp" bodystart="97" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classFlux_1_1resource__model_1_1expr__eval__vtx__target__t_1ab90eff7b112e9377df512726eb6db0ee" prot="private" static="no" mutable="no">
        <type>std::shared_ptr&lt; const f_resource_graph_t &gt;</type>
        <definition>std::shared_ptr&lt;const f_resource_graph_t&gt; Flux::resource_model::expr_eval_vtx_target_t::m_g</definition>
        <argsstring></argsstring>
        <name>m_g</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hobbs17/flux-sched/resource/evaluators/expr_eval_vtx_target.hpp" line="98" column="21" bodyfile="/home/hobbs17/flux-sched/resource/evaluators/expr_eval_vtx_target.hpp" bodystart="98" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classFlux_1_1resource__model_1_1expr__eval__vtx__target__t_1ab62910a3d52c36798a24d67fc502f952" prot="private" static="no" mutable="no">
        <type>vtx_t</type>
        <definition>vtx_t Flux::resource_model::expr_eval_vtx_target_t::m_u</definition>
        <argsstring></argsstring>
        <name>m_u</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hobbs17/flux-sched/resource/evaluators/expr_eval_vtx_target.hpp" line="99" column="11" bodyfile="/home/hobbs17/flux-sched/resource/evaluators/expr_eval_vtx_target.hpp" bodystart="99" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classFlux_1_1resource__model_1_1expr__eval__vtx__target__t_1ae44580cba7f1eb042c926ac1588742ef" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>int</type>
        <definition>int Flux::resource_model::expr_eval_vtx_target_t::validate</definition>
        <argsstring>(const std::string &amp;p, const std::string &amp;x) const</argsstring>
        <name>validate</name>
        <reimplements refid="classFlux_1_1resource__model_1_1expr__eval__target__base__t_1a14d21a191a02f9d9bd46edc74f90aac2">validate</reimplements>
        <param>
          <type>const std::string &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Validate if a predicate expression is valid w/ respect to a resource vertex. As a predicate is often denoted as p(x), the method parameters follow that convention: i.e., p for predicate name and x for the input to the predicate.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>predicate name </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>input to the predicate </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success; -1 on error </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hobbs17/flux-sched/resource/evaluators/expr_eval_vtx_target.hpp" line="61" column="17" bodyfile="/home/hobbs17/flux-sched/resource/evaluators/expr_eval_vtx_target.cpp" bodystart="34" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="classFlux_1_1resource__model_1_1expr__eval__vtx__target__t_1a66cd08ed375977be0f3d2293893dd2b3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>int</type>
        <definition>int Flux::resource_model::expr_eval_vtx_target_t::evaluate</definition>
        <argsstring>(const std::string &amp;p, const std::string &amp;x, bool &amp;result) const</argsstring>
        <name>evaluate</name>
        <reimplements refid="classFlux_1_1resource__model_1_1expr__eval__target__base__t_1acbe9bd21d8bcf8384a50c72ebec70a8d">evaluate</reimplements>
        <param>
          <type>const std::string &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>bool &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Evaluate if predicate p(x) is true or false on a resource vertex. As a predicate is often denoted as p(x), the method parameters follow that convention: i.e., p for predicate name and x for the input to the predicate.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>predicate name </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>input to the predicate </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>result</parametername>
</parameternamelist>
<parameterdescription>
<para>return true or false as p(x) is evaluated on this vertex expression evaluation target. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success; -1 on error </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hobbs17/flux-sched/resource/evaluators/expr_eval_vtx_target.hpp" line="74" column="17" bodyfile="/home/hobbs17/flux-sched/resource/evaluators/expr_eval_vtx_target.cpp" bodystart="57" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="classFlux_1_1resource__model_1_1expr__eval__vtx__target__t_1adaff6c3596df337fb5c076b2328c3c5a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Flux::resource_model::expr_eval_vtx_target_t::initialize</definition>
        <argsstring>(const vtx_predicates_override_t &amp;p, const std::shared_ptr&lt; const f_resource_graph_t &gt; g, vtx_t u)</argsstring>
        <name>initialize</name>
        <param>
          <type>const <ref refid="structFlux_1_1resource__model_1_1vtx__predicates__override__t" kindref="compound">vtx_predicates_override_t</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; const f_resource_graph_t &gt;</type>
          <declname>g</declname>
        </param>
        <param>
          <type>vtx_t</type>
          <declname>u</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initialize the object of this class with a resource vertex. This must be called before the validate and evaluate interfaces can be used.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>overridden predicates (see the description of <ref refid="structFlux_1_1resource__model_1_1vtx__predicates__override__t" kindref="compound">vtx_predicates_override_t</ref> above) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>g</parametername>
</parameternamelist>
<parameterdescription>
<para>shared pointer pointing to a filtered resource graph </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>u</parametername>
</parameternamelist>
<parameterdescription>
<para>vertex. g[u] must return the corresponding state. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success; -1 on error </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hobbs17/flux-sched/resource/evaluators/expr_eval_vtx_target.hpp" line="87" column="10" bodyfile="/home/hobbs17/flux-sched/resource/evaluators/expr_eval_vtx_target.cpp" bodystart="98" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="classFlux_1_1resource__model_1_1expr__eval__vtx__target__t_1ab2d6c72c5231b0e5ec693cb4df55bd86" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Flux::resource_model::expr_eval_vtx_target_t::is_initialized</definition>
        <argsstring>() const</argsstring>
        <name>is_initialized</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Is this object initialized? </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hobbs17/flux-sched/resource/evaluators/expr_eval_vtx_target.hpp" line="93" column="10"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Expression evaluation resource vertex target class. Each resource vertex defines a set of predicates that return true or false based on its current state. This adaptor class enables us to evaluate those predicates without having to modify the resource vertex data types themselves. It is derived from <ref refid="classFlux_1_1resource__model_1_1expr__eval__target__base__t" kindref="compound">expr_eval_target_base_t</ref> and implements its validate and evaluate interfaces to do this work. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>Flux::resource_model::expr_eval_vtx_target_t</label>
        <link refid="classFlux_1_1resource__model_1_1expr__eval__vtx__target__t"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>Flux::resource_model::expr_eval_target_base_t</label>
        <link refid="classFlux_1_1resource__model_1_1expr__eval__target__base__t"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>Flux::resource_model::expr_eval_vtx_target_t</label>
        <link refid="classFlux_1_1resource__model_1_1expr__eval__vtx__target__t"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>m_overridden</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>Flux::resource_model::expr_eval_target_base_t</label>
        <link refid="classFlux_1_1resource__model_1_1expr__eval__target__base__t"/>
      </node>
      <node id="3">
        <label>Flux::resource_model::vtx_predicates_override_t</label>
        <link refid="structFlux_1_1resource__model_1_1vtx__predicates__override__t"/>
      </node>
    </collaborationgraph>
    <location file="/home/hobbs17/flux-sched/resource/evaluators/expr_eval_vtx_target.hpp" line="48" column="1" bodyfile="/home/hobbs17/flux-sched/resource/evaluators/expr_eval_vtx_target.hpp" bodystart="48" bodyend="100"/>
    <listofallmembers>
      <member refid="classFlux_1_1resource__model_1_1expr__eval__vtx__target__t_1a66cd08ed375977be0f3d2293893dd2b3" prot="public" virt="virtual"><scope>Flux::resource_model::expr_eval_vtx_target_t</scope><name>evaluate</name></member>
      <member refid="classFlux_1_1resource__model_1_1expr__eval__vtx__target__t_1adaff6c3596df337fb5c076b2328c3c5a" prot="public" virt="non-virtual"><scope>Flux::resource_model::expr_eval_vtx_target_t</scope><name>initialize</name></member>
      <member refid="classFlux_1_1resource__model_1_1expr__eval__vtx__target__t_1ab2d6c72c5231b0e5ec693cb4df55bd86" prot="public" virt="non-virtual"><scope>Flux::resource_model::expr_eval_vtx_target_t</scope><name>is_initialized</name></member>
      <member refid="classFlux_1_1resource__model_1_1expr__eval__vtx__target__t_1ab90eff7b112e9377df512726eb6db0ee" prot="private" virt="non-virtual"><scope>Flux::resource_model::expr_eval_vtx_target_t</scope><name>m_g</name></member>
      <member refid="classFlux_1_1resource__model_1_1expr__eval__vtx__target__t_1a24e0f52c2d44a80b652c617d790a6f42" prot="private" virt="non-virtual"><scope>Flux::resource_model::expr_eval_vtx_target_t</scope><name>m_initialized</name></member>
      <member refid="classFlux_1_1resource__model_1_1expr__eval__vtx__target__t_1a46a472e8bb3ae5a5568311ee41f3abc8" prot="private" virt="non-virtual"><scope>Flux::resource_model::expr_eval_vtx_target_t</scope><name>m_overridden</name></member>
      <member refid="classFlux_1_1resource__model_1_1expr__eval__vtx__target__t_1ab62910a3d52c36798a24d67fc502f952" prot="private" virt="non-virtual"><scope>Flux::resource_model::expr_eval_vtx_target_t</scope><name>m_u</name></member>
      <member refid="classFlux_1_1resource__model_1_1expr__eval__vtx__target__t_1ae44580cba7f1eb042c926ac1588742ef" prot="public" virt="virtual"><scope>Flux::resource_model::expr_eval_vtx_target_t</scope><name>validate</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
