<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="planner__test01_8cpp" kind="file" language="C++">
    <compoundname>planner_test01.cpp</compoundname>
    <includes local="no">cstdlib</includes>
    <includes local="no">sstream</includes>
    <includes local="no">string</includes>
    <includes local="no">cstring</includes>
    <includes local="no">cstdint</includes>
    <includes local="no">cerrno</includes>
    <includes local="no">vector</includes>
    <includes local="no">map</includes>
    <includes refid="planner_8h" local="yes">planner.h</includes>
    <includes local="yes">src/common/libtap/tap.h</includes>
    <incdepgraph>
      <node id="12">
        <label>stdbool.h</label>
      </node>
      <node id="6">
        <label>cstdint</label>
      </node>
      <node id="11">
        <label>stdint.h</label>
      </node>
      <node id="4">
        <label>string</label>
      </node>
      <node id="9">
        <label>map</label>
      </node>
      <node id="1">
        <label>planner_test01.cpp</label>
        <link refid="planner__test01_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>stddef.h</label>
      </node>
      <node id="8">
        <label>vector</label>
      </node>
      <node id="3">
        <label>sstream</label>
      </node>
      <node id="7">
        <label>cerrno</label>
      </node>
      <node id="2">
        <label>cstdlib</label>
      </node>
      <node id="14">
        <label>src/common/libtap/tap.h</label>
      </node>
      <node id="10">
        <label>planner.h</label>
        <link refid="planner_8h_source"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>cstring</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="planner__test01_8cpp_1a5059d441166fa70070717bb686f010e8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void to_stream</definition>
        <argsstring>(int64_t base_time, uint64_t duration, uint64_t cnts, const char *type, std::stringstream &amp;ss)</argsstring>
        <name>to_stream</name>
        <param>
          <type>int64_t</type>
          <declname>base_time</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>duration</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>cnts</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>type</declname>
        </param>
        <param>
          <type>std::stringstream &amp;</type>
          <declname>ss</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hobbs17/flux-sched/resource/planner/test/planner_test01.cpp" line="27" column="13" bodyfile="/home/hobbs17/flux-sched/resource/planner/test/planner_test01.cpp" bodystart="27" bodyend="34"/>
      </memberdef>
      <memberdef kind="function" id="planner__test01_8cpp_1a6ccdbab2dc4f667f259191fc4e9cfa57" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int test_planner_getters</definition>
        <argsstring>()</argsstring>
        <name>test_planner_getters</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hobbs17/flux-sched/resource/planner/test/planner_test01.cpp" line="36" column="12" bodyfile="/home/hobbs17/flux-sched/resource/planner/test/planner_test01.cpp" bodystart="36" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="planner__test01_8cpp_1ab8cbcf6c2e25e7d5a4407e24830e4d6d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int test_basic_add_remove</definition>
        <argsstring>()</argsstring>
        <name>test_basic_add_remove</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hobbs17/flux-sched/resource/planner/test/planner_test01.cpp" line="69" column="12" bodyfile="/home/hobbs17/flux-sched/resource/planner/test/planner_test01.cpp" bodystart="69" bodyend="146"/>
      </memberdef>
      <memberdef kind="function" id="planner__test01_8cpp_1a7b540fe44e4450ce26244594c539e8cf" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int test_availability_checkers</definition>
        <argsstring>()</argsstring>
        <name>test_availability_checkers</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hobbs17/flux-sched/resource/planner/test/planner_test01.cpp" line="148" column="12" bodyfile="/home/hobbs17/flux-sched/resource/planner/test/planner_test01.cpp" bodystart="148" bodyend="305"/>
      </memberdef>
      <memberdef kind="function" id="planner__test01_8cpp_1a274f33f2d30d58636970fdbf60fdcff0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int test_add_and_iterator</definition>
        <argsstring>()</argsstring>
        <name>test_add_and_iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hobbs17/flux-sched/resource/planner/test/planner_test01.cpp" line="307" column="5" bodyfile="/home/hobbs17/flux-sched/resource/planner/test/planner_test01.cpp" bodystart="307" bodyend="339"/>
      </memberdef>
      <memberdef kind="function" id="planner__test01_8cpp_1acc46b9f69bba06c49b597920789dec51" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int test_on_or_after</definition>
        <argsstring>()</argsstring>
        <name>test_on_or_after</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hobbs17/flux-sched/resource/planner/test/planner_test01.cpp" line="341" column="5" bodyfile="/home/hobbs17/flux-sched/resource/planner/test/planner_test01.cpp" bodystart="341" bodyend="383"/>
      </memberdef>
      <memberdef kind="function" id="planner__test01_8cpp_1aec2e277004979624b80907c1c145ee14" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int test_remove_more</definition>
        <argsstring>()</argsstring>
        <name>test_remove_more</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hobbs17/flux-sched/resource/planner/test/planner_test01.cpp" line="385" column="5" bodyfile="/home/hobbs17/flux-sched/resource/planner/test/planner_test01.cpp" bodystart="385" bodyend="420"/>
      </memberdef>
      <memberdef kind="function" id="planner__test01_8cpp_1aacd201f4f9f97bca4a2d447ef57f1e51" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int test_stress_fully_overlap</definition>
        <argsstring>()</argsstring>
        <name>test_stress_fully_overlap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hobbs17/flux-sched/resource/planner/test/planner_test01.cpp" line="422" column="5" bodyfile="/home/hobbs17/flux-sched/resource/planner/test/planner_test01.cpp" bodystart="422" bodyend="457"/>
      </memberdef>
      <memberdef kind="function" id="planner__test01_8cpp_1a57a102c74096a6acfee7610c4f710cb1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int test_stress_4spans_overlap</definition>
        <argsstring>()</argsstring>
        <name>test_stress_4spans_overlap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hobbs17/flux-sched/resource/planner/test/planner_test01.cpp" line="459" column="5" bodyfile="/home/hobbs17/flux-sched/resource/planner/test/planner_test01.cpp" bodystart="459" bodyend="493"/>
      </memberdef>
      <memberdef kind="function" id="planner__test01_8cpp_1a40e2a78c37660c419ca35ca59c852886" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int test_resource_service_flow</definition>
        <argsstring>()</argsstring>
        <name>test_resource_service_flow</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hobbs17/flux-sched/resource/planner/test/planner_test01.cpp" line="495" column="12" bodyfile="/home/hobbs17/flux-sched/resource/planner/test/planner_test01.cpp" bodystart="495" bodyend="582"/>
      </memberdef>
      <memberdef kind="function" id="planner__test01_8cpp_1ae1fe341523427cb7533202287f0c5387" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int test_more_add_remove</definition>
        <argsstring>()</argsstring>
        <name>test_more_add_remove</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hobbs17/flux-sched/resource/planner/test/planner_test01.cpp" line="584" column="12" bodyfile="/home/hobbs17/flux-sched/resource/planner/test/planner_test01.cpp" bodystart="584" bodyend="649"/>
      </memberdef>
      <memberdef kind="function" id="planner__test01_8cpp_1a4ec155a326a7a397864b0b91880d9605" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int test_constructors_and_overload</definition>
        <argsstring>()</argsstring>
        <name>test_constructors_and_overload</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hobbs17/flux-sched/resource/planner/test/planner_test01.cpp" line="651" column="12" bodyfile="/home/hobbs17/flux-sched/resource/planner/test/planner_test01.cpp" bodystart="651" bodyend="730"/>
      </memberdef>
      <memberdef kind="function" id="planner__test01_8cpp_1aeb8002c791ce340a194ff96ade90527c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int test_update</definition>
        <argsstring>()</argsstring>
        <name>test_update</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hobbs17/flux-sched/resource/planner/test/planner_test01.cpp" line="732" column="12" bodyfile="/home/hobbs17/flux-sched/resource/planner/test/planner_test01.cpp" bodystart="732" bodyend="783"/>
      </memberdef>
      <memberdef kind="function" id="planner__test01_8cpp_1a0ddf1224851353fc92bfbff6f499fa97" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int main</definition>
        <argsstring>(int argc, char *argv[])</argsstring>
        <name>main</name>
        <param>
          <type>int</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>argv</declname>
          <array>[]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hobbs17/flux-sched/resource/planner/test/planner_test01.cpp" line="785" column="5" bodyfile="/home/hobbs17/flux-sched/resource/planner/test/planner_test01.cpp" bodystart="785" bodyend="816"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*****************************************************************************\</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>2014<sp/>Lawrence<sp/>Livermore<sp/>National<sp/>Security,<sp/>LLC</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>(c.f.<sp/>AUTHORS,<sp/>NOTICE.LLNS,<sp/>LICENSE)</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>the<sp/>Flux<sp/>resource<sp/>manager<sp/>framework.</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>For<sp/>details,<sp/>see<sp/>https://github.com/flux-framework.</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>LGPL-3.0</highlight></codeline>
<codeline lineno="9"><highlight class="comment">\*****************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>HAVE_CONFIG_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/>#include<sp/>&quot;config.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal">}</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdlib&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstring&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdint&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cerrno&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;map&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;planner.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;src/common/libtap/tap.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>to_stream<sp/>(int64_t<sp/>base_time,<sp/>uint64_t<sp/>duration,<sp/>uint64_t<sp/>cnts,</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*type,<sp/>std::stringstream<sp/>&amp;ss)</highlight></codeline>
<codeline lineno="29"><highlight class="normal">{</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(base_time<sp/>!=<sp/>-1)</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ss<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;B(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>base_time<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;):&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>ss<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;D(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>duration<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;):&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;R_&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>ss<sp/>&lt;&lt;<sp/>type<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>cnts<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="34"><highlight class="normal">}</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>test_planner_getters<sp/>()</highlight></codeline>
<codeline lineno="37"><highlight class="normal">{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>bo<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>rc<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>avail<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>std::stringstream<sp/>ss;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structplanner__t" kindref="compound">planner_t</ref><sp/>*ctx<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*type<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>resource_total<sp/>=<sp/>10;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>resource_type[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;1&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>to_stream<sp/>(0,<sp/>9999,<sp/>resource_total,<sp/>resource_type,<sp/>ss);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>ctx<sp/>=<sp/>planner_new<sp/>(0,<sp/>9999,<sp/>resource_total,<sp/>resource_type);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>ok<sp/>(ctx<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;new<sp/>with<sp/>(%s)&quot;</highlight><highlight class="normal">,<sp/>ss.str<sp/>().c_str<sp/>());</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>rc<sp/>=<sp/>planner_base_time<sp/>(ctx);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>ok<sp/>((rc<sp/>==<sp/>0),<sp/></highlight><highlight class="stringliteral">&quot;base_time<sp/>works<sp/>for<sp/>(%s)&quot;</highlight><highlight class="normal">,<sp/>ss.str<sp/>().c_str<sp/>());</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>rc<sp/>=<sp/>planner_duration<sp/>(ctx);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>ok<sp/>((rc<sp/>==<sp/>9999),<sp/></highlight><highlight class="stringliteral">&quot;duration<sp/>works<sp/>for<sp/>(%s)&quot;</highlight><highlight class="normal">,<sp/>ss.str<sp/>().c_str<sp/>());</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>avail<sp/>=<sp/>planner_resource_total<sp/>(ctx);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>bo<sp/>=<sp/>(bo<sp/>||<sp/>(avail<sp/>!=<sp/>10));</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>type<sp/>=<sp/>planner_resource_type<sp/>(ctx);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>bo<sp/>=<sp/>(bo<sp/>||<sp/>(type<sp/>==<sp/>resource_type));</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>ok<sp/>(!bo,<sp/></highlight><highlight class="stringliteral">&quot;planner<sp/>getters<sp/>work&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>planner_destroy<sp/>(&amp;ctx);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="67"><highlight class="normal">}</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>test_basic_add_remove<sp/>()</highlight></codeline>
<codeline lineno="70"><highlight class="normal">{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rc;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>t;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>std::stringstream<sp/>ss;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structplanner__t" kindref="compound">planner_t</ref><sp/>*ctx<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>resource_type[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;B&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>resource_total<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>counts1<sp/>=<sp/>resource_total;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>span1<sp/>=<sp/>-1,<sp/>span2<sp/>=<sp/>-1,<sp/>span3<sp/>=<sp/>-1,<sp/>span4<sp/>=<sp/>-1,<sp/>span5<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>to_stream<sp/>(0,<sp/>10,<sp/>resource_total,<sp/>resource_type,<sp/>ss);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>ctx<sp/>=<sp/>planner_new<sp/>(0,<sp/>10,<sp/>resource_total,<sp/>resource_type);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>ok<sp/>(ctx<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;new<sp/>with<sp/>(%s)&quot;</highlight><highlight class="normal">,<sp/>ss.str<sp/>().c_str<sp/>());</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>ss.str<sp/>(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>to_stream<sp/>(-1,<sp/>5,<sp/>counts1,<sp/>resource_type,<sp/>ss);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>t<sp/>=<sp/>planner_avail_time_first<sp/>(ctx,<sp/>0,<sp/>5,<sp/>counts1);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>ok<sp/>(t<sp/>==<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;first<sp/>scheduled<sp/>point<sp/>is<sp/>@%d<sp/>for<sp/>(%s)&quot;</highlight><highlight class="normal">,<sp/>t,<sp/>ss.str<sp/>().c_str<sp/>());</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>span1<sp/>=<sp/>planner_add_span<sp/>(ctx,<sp/>t,<sp/>5,<sp/>counts1);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>ok<sp/>(span1<sp/>!=<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;span1<sp/>added<sp/>for<sp/>(%s)&quot;</highlight><highlight class="normal">,<sp/>ss.str<sp/>().c_str<sp/>());</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>ss.str<sp/>(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>to_stream<sp/>(-1,<sp/>2,<sp/>counts1,<sp/>resource_type,<sp/>ss);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>t<sp/>=<sp/>planner_avail_time_first<sp/>(ctx,<sp/>0,<sp/>2,<sp/>counts1);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>ok<sp/>(t<sp/>==<sp/>5,<sp/></highlight><highlight class="stringliteral">&quot;second<sp/>point<sp/>is<sp/>@%d<sp/>for<sp/>(%s)&quot;</highlight><highlight class="normal">,<sp/>t,<sp/>ss.str<sp/>().c_str<sp/>());</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>span2<sp/>=<sp/>planner_add_span<sp/>(ctx,<sp/>t,<sp/>2,<sp/>counts1);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>ok<sp/>(span2<sp/>!=<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;span2<sp/>added<sp/>for<sp/>(%s)&quot;</highlight><highlight class="normal">,<sp/>ss.str<sp/>().c_str<sp/>());</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>ss.str<sp/>(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>to_stream<sp/>(-1,<sp/>2,<sp/>counts1,<sp/>resource_type,<sp/>ss);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>t<sp/>=<sp/>planner_avail_time_first<sp/>(ctx,<sp/>0,<sp/>2,<sp/>counts1);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>ok<sp/>(t<sp/>==<sp/>7,<sp/></highlight><highlight class="stringliteral">&quot;third<sp/>point<sp/>is<sp/>@%d<sp/>for<sp/>(%s)&quot;</highlight><highlight class="normal">,<sp/>t,<sp/>ss.str<sp/>().c_str<sp/>());</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>span3<sp/>=<sp/>planner_add_span<sp/>(ctx,<sp/>t,<sp/>2,<sp/>counts1);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>ok<sp/>(span3<sp/>!=<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;span3<sp/>added<sp/>for<sp/>(%s)&quot;</highlight><highlight class="normal">,<sp/>ss.str<sp/>().c_str<sp/>());</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>ss.str<sp/>(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>to_stream<sp/>(-1,<sp/>2,<sp/>counts1,<sp/>resource_type,<sp/>ss);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>t<sp/>=<sp/>planner_avail_time_first<sp/>(ctx,<sp/>0,<sp/>2,<sp/>counts1);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>ok<sp/>(t<sp/>==<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;no<sp/>scheduled<sp/>point<sp/>available<sp/>for<sp/>(%s)&quot;</highlight><highlight class="normal">,<sp/>ss.str<sp/>().c_str<sp/>());</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>ss.str<sp/>(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>to_stream<sp/>(-1,<sp/>1,<sp/>counts1,<sp/>resource_type,<sp/>ss);</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>t<sp/>=<sp/>planner_avail_time_first<sp/>(ctx,<sp/>0,<sp/>1,<sp/>counts1);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>ok<sp/>(t<sp/>==<sp/>9,<sp/></highlight><highlight class="stringliteral">&quot;fourth<sp/>point<sp/>is<sp/>@%d<sp/>for<sp/>(%s)&quot;</highlight><highlight class="normal">,<sp/>t,<sp/>ss.str<sp/>().c_str<sp/>());</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>span4<sp/>=<sp/>planner_add_span<sp/>(ctx,<sp/>t,<sp/>1,<sp/>counts1);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>ok<sp/>(span4<sp/>!=<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;span4<sp/>added<sp/>for<sp/>(%s)&quot;</highlight><highlight class="normal">,<sp/>ss.str<sp/>().c_str<sp/>());</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>ss.str<sp/>(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>t<sp/>=<sp/>planner_span_start_time<sp/>(ctx,<sp/>span2);</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/>ok<sp/>(t<sp/>==<sp/>5,<sp/></highlight><highlight class="stringliteral">&quot;span_start_time<sp/>returned<sp/>%ju&quot;</highlight><highlight class="normal">,<sp/>(intmax_t)t);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>rc<sp/>=<sp/>planner_rem_span<sp/>(ctx,<sp/>span2);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>ok<sp/>(!rc,<sp/></highlight><highlight class="stringliteral">&quot;span2<sp/>removed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>rc<sp/>=<sp/>planner_rem_span<sp/>(ctx,<sp/>span3);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>ok<sp/>(!rc,<sp/></highlight><highlight class="stringliteral">&quot;span3<sp/>removed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>to_stream<sp/>(-1,<sp/>5,<sp/>counts1,<sp/>resource_type,<sp/>ss);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/>t<sp/>=<sp/>planner_avail_time_first<sp/>(ctx,<sp/>0,<sp/>5,<sp/>counts1);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>ok<sp/>(t<sp/>==<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;no<sp/>scheduled<sp/>point<sp/>available<sp/>for<sp/>(%s)&quot;</highlight><highlight class="normal">,<sp/>ss.str<sp/>().c_str<sp/>());</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>ss.str<sp/>(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/>to_stream<sp/>(-1,<sp/>4,<sp/>counts1,<sp/>resource_type,<sp/>ss);</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>t<sp/>=<sp/>planner_avail_time_first<sp/>(ctx,<sp/>0,<sp/>4,<sp/>counts1);</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/>ok<sp/>(t<sp/>==<sp/>5,<sp/></highlight><highlight class="stringliteral">&quot;fifth<sp/>point<sp/>is<sp/>@%d<sp/>for<sp/>(%s)&quot;</highlight><highlight class="normal">,<sp/>t,<sp/>ss.str<sp/>().c_str<sp/>());</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>span5<sp/>=<sp/>planner_add_span<sp/>(ctx,<sp/>t,<sp/>4,<sp/>counts1);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>ok<sp/>(span5<sp/>!=<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;span5<sp/>added<sp/>for<sp/>(%s)&quot;</highlight><highlight class="normal">,<sp/>ss.str<sp/>().c_str<sp/>());</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>ss.str<sp/>(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/>planner_destroy<sp/>(&amp;ctx);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="146"><highlight class="normal">}</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>test_availability_checkers<sp/>()</highlight></codeline>
<codeline lineno="149"><highlight class="normal">{</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rc;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>bo<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>t<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>avail<sp/>=<sp/>-1,<sp/>tmax<sp/>=<sp/>INT64_MAX;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>span1<sp/>=<sp/>-1,<sp/>span2<sp/>=<sp/>-1,<sp/>span3<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>resource_total<sp/>=<sp/>10;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>counts1<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>counts4<sp/>=<sp/>4;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>counts5<sp/>=<sp/>5;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>counts9<sp/>=<sp/>9;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>counts10<sp/>=<sp/>resource_total;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>resource_type[]<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;A&quot;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structplanner__t" kindref="compound">planner_t</ref><sp/>*ctx<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/>std::stringstream<sp/>ss;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/>to_stream<sp/>(0,<sp/>tmax,<sp/>resource_total,<sp/>resource_type,<sp/>ss);</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/>ctx<sp/>=<sp/>planner_new<sp/>(0,<sp/>tmax,<sp/>resource_total,<sp/>resource_type);</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/>ok<sp/>(ctx<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;new<sp/>with<sp/>(%s)&quot;</highlight><highlight class="normal">,<sp/>ss.str<sp/>().c_str<sp/>());</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/>ss.str<sp/>(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/>to_stream<sp/>(-1,<sp/>5,<sp/>counts10,<sp/>resource_type,<sp/>ss);</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>rc<sp/>=<sp/>planner_avail_during<sp/>(ctx,<sp/>0,<sp/>1,<sp/>counts10);</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/>ok<sp/>(!rc,<sp/></highlight><highlight class="stringliteral">&quot;avail<sp/>check<sp/>works<sp/>(%s)&quot;</highlight><highlight class="normal">,<sp/>ss.str<sp/>().c_str<sp/>());</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/>ss.str<sp/>(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/>to_stream<sp/>(-1,<sp/>1000,<sp/>counts5,<sp/>resource_type,<sp/>ss);</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/>rc<sp/>=<sp/>planner_avail_during<sp/>(ctx,<sp/>1,<sp/>1000,<sp/>counts5);</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/>ok<sp/>(!rc,<sp/></highlight><highlight class="stringliteral">&quot;avail<sp/>check<sp/>works<sp/>(%s)&quot;</highlight><highlight class="normal">,<sp/>ss.str<sp/>().c_str<sp/>());</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/>span1<sp/>=<sp/>planner_add_span<sp/>(ctx,<sp/>1,<sp/>1000,<sp/>counts5);</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/>ok<sp/>((span1<sp/>!=<sp/>-1),<sp/></highlight><highlight class="stringliteral">&quot;span1<sp/>added<sp/>for<sp/>(%s)&quot;</highlight><highlight class="normal">,<sp/>ss.str<sp/>().c_str<sp/>());</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/>ss.str<sp/>(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/>to_stream<sp/>(-1,<sp/>1000,<sp/>counts10,<sp/>resource_type,<sp/>ss);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/>rc<sp/>=<sp/>planner_avail_during<sp/>(ctx,<sp/>2000,<sp/>1001,<sp/>counts10);</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>span2<sp/>=<sp/>planner_add_span<sp/>(ctx,<sp/>2000,<sp/>1001,<sp/>counts10);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/>ok<sp/>((span2<sp/>!=<sp/>-1),<sp/></highlight><highlight class="stringliteral">&quot;span2<sp/>added<sp/>for<sp/>(%s)&quot;</highlight><highlight class="normal">,<sp/>ss.str<sp/>().c_str<sp/>());</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/>ss.str<sp/>(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/>to_stream<sp/>(-1,<sp/>2990,<sp/>counts1,<sp/>resource_type,<sp/>ss);</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/>rc<sp/>=<sp/>planner_avail_during<sp/>(ctx,<sp/>10,<sp/>2991,<sp/>counts1);</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/>ok<sp/>(rc<sp/>==<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;over-alloc<sp/>fails<sp/>for<sp/>(%s)&quot;</highlight><highlight class="normal">,<sp/>ss.str<sp/>().c_str<sp/>());</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/>ss.str<sp/>(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/>to_stream<sp/>(-1,<sp/>1990,<sp/>counts1,<sp/>resource_type,<sp/>ss);</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/>rc<sp/>=<sp/>planner_avail_during<sp/>(ctx,<sp/>10,<sp/>1990,<sp/>counts1);</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/>ok<sp/>(!rc,<sp/></highlight><highlight class="stringliteral">&quot;overlapping<sp/>works<sp/>(%s)&quot;</highlight><highlight class="normal">,<sp/>ss.str<sp/>().c_str<sp/>());</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/>span3<sp/>=<sp/>planner_add_span<sp/>(ctx,<sp/>10,<sp/>1990,<sp/>counts1);</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/>ok<sp/>((span3<sp/>!=<sp/>-1),<sp/></highlight><highlight class="stringliteral">&quot;span3<sp/>added<sp/>for<sp/>(%s)&quot;</highlight><highlight class="normal">,<sp/>ss.str<sp/>().c_str<sp/>());</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/>ss.str<sp/>(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/>avail<sp/>=<sp/>planner_avail_resources_at<sp/>(ctx,<sp/>1);</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/>bo<sp/>=<sp/>(bo<sp/>||<sp/>avail<sp/>!=<sp/>5);</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/>avail<sp/>=<sp/>planner_avail_resources_at<sp/>(ctx,<sp/>10);</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/>bo<sp/>=<sp/>(bo<sp/>||<sp/>avail<sp/>!=<sp/>4);</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/>avail<sp/>=<sp/>planner_avail_resources_at<sp/>(ctx,<sp/>1500);</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/>bo<sp/>=<sp/>(bo<sp/>||<sp/>avail<sp/>!=<sp/>9);</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/>avail<sp/>=<sp/>planner_avail_resources_at<sp/>(ctx,<sp/>2000);</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/>bo<sp/>=<sp/>(bo<sp/>||<sp/>avail<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/>avail<sp/>=<sp/>planner_avail_resources_at<sp/>(ctx,<sp/>2500);</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/>bo<sp/>=<sp/>(bo<sp/>||<sp/>avail<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/>avail<sp/>=<sp/>planner_avail_resources_at<sp/>(ctx,<sp/>3000);</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/>bo<sp/>=<sp/>(bo<sp/>||<sp/>avail<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/>avail<sp/>=<sp/>planner_avail_resources_at<sp/>(ctx,<sp/>3001);</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/>bo<sp/>=<sp/>(bo<sp/>||<sp/>avail<sp/>!=<sp/>10);</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/>ok<sp/>(!bo,<sp/></highlight><highlight class="stringliteral">&quot;avail_at_resources_*<sp/>works&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/>bo<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/>rc<sp/>=<sp/>planner_avail_during<sp/>(ctx,<sp/>2000,<sp/>1001,<sp/>counts1);</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/>bo<sp/>=<sp/>(bo<sp/>||<sp/>rc<sp/>!=<sp/>-1);</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/>avail<sp/>=<sp/>planner_avail_resources_during<sp/>(ctx,<sp/>2000,<sp/>1001);</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/>bo<sp/>=<sp/>(bo<sp/>||<sp/>avail<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/>rc<sp/>=<sp/>planner_avail_during<sp/>(ctx,<sp/>0,<sp/>1001,<sp/>counts4);</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/>bo<sp/>=<sp/>(bo<sp/>||<sp/>rc<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/>avail<sp/>=<sp/>planner_avail_resources_during<sp/>(ctx,<sp/>0,<sp/>1001);</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/>bo<sp/>=<sp/>(bo<sp/>||<sp/>avail<sp/>!=<sp/>4);</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/>rc<sp/>=<sp/>planner_avail_during<sp/>(ctx,<sp/>10,<sp/>1990,<sp/>counts4);</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/>bo<sp/>=<sp/>(bo<sp/>||<sp/>rc<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/>avail<sp/>=<sp/>planner_avail_resources_during<sp/>(ctx,<sp/>10,<sp/>1990);</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/>bo<sp/>=<sp/>(bo<sp/>||<sp/>avail<sp/>!=<sp/>4);</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/>ok<sp/>(!bo,<sp/></highlight><highlight class="stringliteral">&quot;resources_during<sp/>works&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/>bo<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/>rc<sp/>=<sp/>planner_avail_during<sp/>(ctx,<sp/>4,<sp/>3,<sp/>counts5);</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/>bo<sp/>=<sp/>(bo<sp/>||<sp/>rc<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/>avail<sp/>=<sp/>planner_avail_resources_during<sp/>(ctx,<sp/>4,<sp/>3);</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/>bo<sp/>=<sp/>(bo<sp/>||<sp/>avail<sp/>!=<sp/>5);</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/>rc<sp/>=<sp/>planner_avail_during<sp/>(ctx,<sp/>20,<sp/>980,<sp/>counts4);</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/>bo<sp/>=<sp/>(bo<sp/>||<sp/>rc<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/>avail<sp/>=<sp/>planner_avail_resources_during<sp/>(ctx,<sp/>20,<sp/>980);</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/>bo<sp/>=<sp/>(bo<sp/>||<sp/>avail<sp/>!=<sp/>4);</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/>rc<sp/>=<sp/>planner_avail_during<sp/>(ctx,<sp/>1001,<sp/>998,<sp/>counts9);</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/>bo<sp/>=<sp/>(bo<sp/>||<sp/>rc<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/>avail<sp/>=<sp/>planner_avail_resources_during<sp/>(ctx,<sp/>1001,<sp/>998);</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/>bo<sp/>=<sp/>(bo<sp/>||<sp/>avail<sp/>!=<sp/>9);</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/>rc<sp/>=<sp/>planner_avail_during<sp/>(ctx,<sp/>2500,<sp/>101,<sp/>counts1);</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/>bo<sp/>=<sp/>(bo<sp/>||<sp/>rc<sp/>!=<sp/>-1);</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/>avail<sp/>=<sp/>planner_avail_resources_during<sp/>(ctx,<sp/>2500,<sp/>101);</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/>bo<sp/>=<sp/>(bo<sp/>||<sp/>avail<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/>ok<sp/>(!bo,<sp/></highlight><highlight class="stringliteral">&quot;resources_during<sp/>works<sp/>for<sp/>a<sp/>subset<sp/>(no<sp/>edges)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/>bo<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/>rc<sp/>=<sp/>planner_avail_during<sp/>(ctx,<sp/>0,<sp/>1000,<sp/>counts4);</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/>bo<sp/>=<sp/>(bo<sp/>||<sp/>rc<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/>rc<sp/>=<sp/>planner_avail_during<sp/>(ctx,<sp/>10,<sp/>990,<sp/>counts4);</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/>bo<sp/>=<sp/>(bo<sp/>||<sp/>rc<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/>rc<sp/>=<sp/>planner_avail_during<sp/>(ctx,<sp/>20,<sp/>981,<sp/>counts4);</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/>bo<sp/>=<sp/>(bo<sp/>||<sp/>rc<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/>rc<sp/>=<sp/>planner_avail_during<sp/>(ctx,<sp/>1001,<sp/>999,<sp/>counts9);</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/>bo<sp/>=<sp/>(bo<sp/>||<sp/>rc<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/>ok<sp/>(!bo,<sp/></highlight><highlight class="stringliteral">&quot;resources_during<sp/>works<sp/>for<sp/>a<sp/>subset<sp/>(1<sp/>edge)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/>bo<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/>rc<sp/>=<sp/>planner_avail_during<sp/>(ctx,<sp/>100,<sp/>1401,<sp/>counts4);</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/>bo<sp/>=<sp/>(bo<sp/>||<sp/>rc<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/>rc<sp/>=<sp/>planner_avail_during<sp/>(ctx,<sp/>1500,<sp/>1001,<sp/>counts1);</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/>bo<sp/>=<sp/>(bo<sp/>||<sp/>rc<sp/>!=<sp/>-1);</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/>rc<sp/>=<sp/>planner_avail_during<sp/>(ctx,<sp/>1000,<sp/>1001,<sp/>counts1);</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/>bo<sp/>=<sp/>(bo<sp/>||<sp/>rc<sp/>!=<sp/>-1);</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/>ok<sp/>(!bo,<sp/></highlight><highlight class="stringliteral">&quot;resources_during<sp/>works<sp/>for<sp/>&gt;1<sp/>overlapping<sp/>spans&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/>bo<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/>rc<sp/>=<sp/>planner_avail_during<sp/>(ctx,<sp/>0,<sp/>3001,<sp/>counts1);</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/>bo<sp/>=<sp/>(bo<sp/>||<sp/>rc<sp/>!=<sp/>-1);</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/>rc<sp/>=<sp/>planner_avail_during<sp/>(ctx,<sp/>0,<sp/>2001,<sp/>counts1);</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/>bo<sp/>=<sp/>(bo<sp/>||<sp/>rc<sp/>!=<sp/>-1);</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/>rc<sp/>=<sp/>planner_avail_during<sp/>(ctx,<sp/>3001,<sp/>2000,<sp/>counts10);</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/>bo<sp/>=<sp/>(bo<sp/>||<sp/>rc<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/>ok<sp/>(!bo,<sp/></highlight><highlight class="stringliteral">&quot;resources_during<sp/>works<sp/>for<sp/>all<sp/>spans&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/>bo<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/>t<sp/>=<sp/>planner_avail_time_first<sp/>(ctx,<sp/>0,<sp/>9,<sp/>counts5);</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/>bo<sp/>=<sp/>(bo<sp/>||<sp/>t<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/>t<sp/>=<sp/>planner_avail_time_next<sp/>(ctx);</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/>bo<sp/>=<sp/>(bo<sp/>||<sp/>t<sp/>!=<sp/>1);</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/>t<sp/>=<sp/>planner_avail_time_next<sp/>(ctx);</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/>bo<sp/>=<sp/>(bo<sp/>||<sp/>t<sp/>!=<sp/>1001);</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/>t<sp/>=<sp/>planner_avail_time_next<sp/>(ctx);</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/>bo<sp/>=<sp/>(bo<sp/>||<sp/>t<sp/>!=<sp/>3001);</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/>t<sp/>=<sp/>planner_avail_time_next<sp/>(ctx);</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/>bo<sp/>=<sp/>(bo<sp/>||<sp/>t<sp/>!=<sp/>-1);</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/>ok<sp/>(!bo<sp/>&amp;&amp;<sp/>errno<sp/>==<sp/>ENOENT,<sp/></highlight><highlight class="stringliteral">&quot;avail_time_*<sp/>works&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/>bo<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/>t<sp/>=<sp/>planner_avail_time_first<sp/>(ctx,<sp/>0,<sp/>10,<sp/>counts9);</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/>bo<sp/>=<sp/>(bo<sp/>||<sp/>t<sp/>!=<sp/>1001);</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/>t<sp/>=<sp/>planner_avail_time_next<sp/>(ctx);</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/>bo<sp/>=<sp/>(bo<sp/>||<sp/>t<sp/>!=<sp/>3001);</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/>t<sp/>=<sp/>planner_avail_time_next<sp/>(ctx);</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/>bo<sp/>=<sp/>(bo<sp/>||<sp/>t<sp/>!=<sp/>-1);</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/>ok<sp/>(!bo<sp/>&amp;&amp;<sp/>errno<sp/>==<sp/>ENOENT,<sp/></highlight><highlight class="stringliteral">&quot;avail_time_*<sp/>test<sp/>2<sp/>works&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/>planner_destroy<sp/>(&amp;ctx);</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="305"><highlight class="normal">}</highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>test_add_and_iterator<sp/>()</highlight></codeline>
<codeline lineno="308"><highlight class="normal">{</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>bo<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>t<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>span1<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>counts3<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>resource_total<sp/>=<sp/>10;</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>resource_type[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structplanner__t" kindref="compound">planner_t</ref><sp/>*ctx<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/>std::stringstream<sp/>ss;</highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/>to_stream<sp/>(0,<sp/>10,<sp/>resource_total,<sp/>resource_type,<sp/>ss);</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/>ctx<sp/>=<sp/>planner_new<sp/>(0,<sp/>10,<sp/>resource_total,<sp/>resource_type);</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/>ok<sp/>(ctx<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;new<sp/>with<sp/>(%s)&quot;</highlight><highlight class="normal">,<sp/>ss.str<sp/>().c_str<sp/>());</highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/>ss.str<sp/>(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/>t<sp/>=<sp/>planner_avail_time_first<sp/>(ctx,<sp/>0,<sp/>4,<sp/>counts3);</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/>bo<sp/>=<sp/>(bo<sp/>||<sp/>t<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/>t<sp/>=<sp/>planner_avail_time_next<sp/>(ctx);</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/>bo<sp/>=<sp/>(bo<sp/>||<sp/>t<sp/>!=<sp/>-1);</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/>span1<sp/>=<sp/>planner_add_span<sp/>(ctx,<sp/>0,<sp/>4,<sp/>counts3);</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/>bo<sp/>=<sp/>(bo<sp/>||<sp/>span1<sp/>==<sp/>-1);</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/>t<sp/>=<sp/>planner_avail_time_first<sp/>(ctx,<sp/>0,<sp/>4,<sp/>counts3);</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/>bo<sp/>=<sp/>(bo<sp/>||<sp/>t<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/>t<sp/>=<sp/>planner_avail_time_next<sp/>(ctx);</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/>bo<sp/>=<sp/>(bo<sp/>||<sp/>t<sp/>!=<sp/>4);</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/>t<sp/>=<sp/>planner_avail_time_next<sp/>(ctx);</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/>bo<sp/>=<sp/>(bo<sp/>||<sp/>t<sp/>!=<sp/>-1);</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/>ok<sp/>(!bo<sp/>&amp;&amp;<sp/>errno<sp/>==<sp/>ENOENT,<sp/></highlight><highlight class="stringliteral">&quot;span_add<sp/>resets<sp/>the<sp/>avail-time<sp/>iterator&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/>planner_destroy<sp/>(&amp;ctx);</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="339"><highlight class="normal">}</highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>test_on_or_after<sp/>()</highlight></codeline>
<codeline lineno="342"><highlight class="normal">{</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rc<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>bo<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>t<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>span1<sp/>=<sp/>-1,<sp/>span2<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>counts1<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>counts2<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>resource_total<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>resource_type[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;A&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structplanner__t" kindref="compound">planner_t</ref><sp/>*ctx<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/>std::stringstream<sp/>ss;</highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/>to_stream<sp/>(0,<sp/>INT64_MAX,<sp/>resource_total,<sp/>resource_type,<sp/>ss);</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/>ctx<sp/>=<sp/>planner_new<sp/>(0,<sp/>INT64_MAX,<sp/>resource_total,<sp/>resource_type);</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/>ok<sp/>(ctx<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;new<sp/>with<sp/>(%s)&quot;</highlight><highlight class="normal">,<sp/>ss.str<sp/>().c_str<sp/>());</highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/>ss.str<sp/>(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/>t<sp/>=<sp/>planner_avail_time_first<sp/>(ctx,<sp/>100000,<sp/>100,<sp/>counts2);</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/>bo<sp/>=<sp/>(bo<sp/>||<sp/>t<sp/>!=<sp/>-1);</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/>rc<sp/>=<sp/>planner_avail_during<sp/>(ctx,<sp/>100000,<sp/>100,<sp/>counts2);</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/>bo<sp/>=<sp/>(bo<sp/>||<sp/>rc<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/>span1<sp/>=<sp/>planner_add_span<sp/>(ctx,<sp/>100000,<sp/>100,<sp/>counts2);</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/>bo<sp/>=<sp/>(bo<sp/>||<sp/>span1<sp/>==<sp/>-1);</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/>t<sp/>=<sp/>planner_avail_time_first<sp/>(ctx,<sp/>100000,<sp/>200,<sp/>counts2);</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/>bo<sp/>=<sp/>(bo<sp/>||<sp/>t<sp/>!=<sp/>100100);</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/>span2<sp/>=<sp/>planner_add_span<sp/>(ctx,<sp/>100100,<sp/>200,<sp/>counts2);</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/>bo<sp/>=<sp/>(bo<sp/>||<sp/>span2<sp/>==<sp/>-1);</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/>t<sp/>=<sp/>planner_avail_time_first<sp/>(ctx,<sp/>100000,<sp/>200,<sp/>counts1);</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/>bo<sp/>=<sp/>(bo<sp/>||<sp/>t<sp/>!=<sp/>100000);</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/>t<sp/>=<sp/>planner_avail_time_next<sp/>(ctx);</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/>bo<sp/>=<sp/>(bo<sp/>||<sp/>t<sp/>!=<sp/>100100);</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/>t<sp/>=<sp/>planner_avail_time_next<sp/>(ctx);</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/>bo<sp/>=<sp/>(bo<sp/>||<sp/>t<sp/>!=<sp/>100300);</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/>t<sp/>=<sp/>planner_avail_time_first<sp/>(ctx,<sp/>0,<sp/>200,<sp/>counts1);</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/>bo<sp/>=<sp/>(bo<sp/>||<sp/>t<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/>t<sp/>=<sp/>planner_avail_time_next<sp/>(ctx);</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/>bo<sp/>=<sp/>(bo<sp/>||<sp/>t<sp/>!=<sp/>100000);</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/>ok<sp/>(!bo,<sp/></highlight><highlight class="stringliteral">&quot;on_or_after<sp/>support<sp/>works&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/>planner_destroy<sp/>(&amp;ctx);</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="383"><highlight class="normal">}</highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>test_remove_more<sp/>()</highlight></codeline>
<codeline lineno="386"><highlight class="normal">{</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>end<sp/>=<sp/>0,<sp/>i,<sp/>rc;</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>at,<sp/>span;</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>bo<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>resource_total<sp/>=<sp/>10;</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>resource_type[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;core&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>count<sp/>=<sp/>5;</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>overlap_factor<sp/>=<sp/>resource_total/count;</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;int64_t&gt;<sp/>query_times;</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structplanner__t" kindref="compound">planner_t</ref><sp/>*ctx<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/>std::stringstream<sp/>ss;</highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/>to_stream<sp/>(0,<sp/>INT64_MAX,<sp/>resource_total,<sp/>resource_type,<sp/>ss);</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/>ctx<sp/>=<sp/>planner_new<sp/>(0,<sp/>INT64_MAX,<sp/>resource_total,<sp/>resource_type);</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/>ok<sp/>(ctx<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;new<sp/>with<sp/>(%s)&quot;</highlight><highlight class="normal">,<sp/>ss.str<sp/>().c_str<sp/>());</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/>ss.str<sp/>(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;int64_t&gt;<sp/>spans;</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>10000;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>at<sp/>=<sp/>i/overlap_factor<sp/>*<sp/>1000;</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>span<sp/>=<sp/>planner_add_span<sp/>(ctx,<sp/>at,<sp/>1000,<sp/>count);</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spans.push_back<sp/>(span);</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bo<sp/>=<sp/>(bo<sp/>||<sp/>span<sp/>==<sp/>-1);</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>end;<sp/>i<sp/>+=<sp/>4)<sp/>{</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rc<sp/>=<sp/>planner_rem_span<sp/>(ctx,<sp/>spans[i]);</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bo<sp/>=<sp/>(bo<sp/>||<sp/>rc<sp/>==<sp/>-1);</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="415"><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/>ok<sp/>(!bo,<sp/></highlight><highlight class="stringliteral">&quot;removing<sp/>more<sp/>works&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/>planner_destroy<sp/>(&amp;ctx);</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal">}</highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>test_stress_fully_overlap<sp/>()</highlight></codeline>
<codeline lineno="423"><highlight class="normal">{</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>bo<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>t<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>span;</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>resource_total<sp/>=<sp/>10000000;</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>counts100<sp/>=<sp/>100;</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>resource_type[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;hardware-thread&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structplanner__t" kindref="compound">planner_t</ref><sp/>*ctx<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/>std::stringstream<sp/>ss;</highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/>to_stream<sp/>(0,<sp/>INT64_MAX,<sp/>resource_total,<sp/>resource_type,<sp/>ss);</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/>ctx<sp/>=<sp/>planner_new<sp/>(0,<sp/>INT64_MAX,<sp/>resource_total,<sp/>resource_type);</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/>ok<sp/>(ctx<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;new<sp/>with<sp/>(%s)&quot;</highlight><highlight class="normal">,<sp/>ss.str<sp/>().c_str<sp/>());</highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/>ss.str<sp/>(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>100000;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>=<sp/>planner_avail_time_first<sp/>(ctx,<sp/>0,<sp/>4,<sp/>counts100);</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bo<sp/>=<sp/>(bo<sp/>||<sp/>t<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>span<sp/>=<sp/>planner_add_span<sp/>(ctx,<sp/>t,<sp/>4,<sp/>counts100);</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bo<sp/>=<sp/>(bo<sp/>||<sp/>span<sp/>==<sp/>-1);</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/>ok<sp/>(!bo,<sp/></highlight><highlight class="stringliteral">&quot;add_span<sp/>100000<sp/>times<sp/>(fully<sp/>overlapped<sp/>spans)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>100000;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>=<sp/>planner_avail_time_first<sp/>(ctx,<sp/>0,<sp/>4,<sp/>counts100);</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bo<sp/>=<sp/>(bo<sp/>||<sp/>t<sp/>!=<sp/>4);</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>span<sp/>=<sp/>planner_add_span<sp/>(ctx,<sp/>t,<sp/>4,<sp/>counts100);</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bo<sp/>=<sp/>(bo<sp/>||<sp/>span<sp/>==<sp/>-1);</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/>ok<sp/>(!bo,<sp/></highlight><highlight class="stringliteral">&quot;add_span<sp/>100000<sp/>more<sp/>(fully<sp/>overlapped<sp/>spans)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/>planner_destroy<sp/>(&amp;ctx);</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="457"><highlight class="normal">}</highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>test_stress_4spans_overlap<sp/>()</highlight></codeline>
<codeline lineno="460"><highlight class="normal">{</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rc<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>span;</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>bo<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>resource_total<sp/>=<sp/>10000000;</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>resource_type[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;hardware-thread&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>counts100<sp/>=<sp/>100;</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structplanner__t" kindref="compound">planner_t</ref><sp/>*ctx<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/>std::stringstream<sp/>ss;</highlight></codeline>
<codeline lineno="470"><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/>to_stream<sp/>(0,<sp/>INT64_MAX,<sp/>resource_total,<sp/>resource_type,<sp/>ss);</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/>ctx<sp/>=<sp/>planner_new<sp/>(0,<sp/>INT64_MAX,<sp/>resource_total,<sp/>resource_type);</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/>ok<sp/>(ctx<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;new<sp/>with<sp/>(%s)&quot;</highlight><highlight class="normal">,<sp/>ss.str<sp/>().c_str<sp/>());</highlight></codeline>
<codeline lineno="474"><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>100000;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rc<sp/>=<sp/>planner_avail_during<sp/>(ctx,<sp/>i,<sp/>4,<sp/>counts100);</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bo<sp/>=<sp/>(bo<sp/>||<sp/>rc<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>span<sp/>=<sp/>planner_add_span<sp/>(ctx,<sp/>i,<sp/>4,<sp/>counts100);</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bo<sp/>=<sp/>(bo<sp/>||<sp/>span<sp/>==<sp/>-1);</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/>ok<sp/>(!bo,<sp/></highlight><highlight class="stringliteral">&quot;add_span<sp/>100000<sp/>times<sp/>(4<sp/>spans<sp/>overlap)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>100000;<sp/>i<sp/>&lt;<sp/>200000;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rc<sp/>=<sp/>planner_avail_during<sp/>(ctx,<sp/>i,<sp/>4,<sp/>counts100);</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bo<sp/>=<sp/>(bo<sp/>||<sp/>rc<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>span<sp/>=<sp/>planner_add_span<sp/>(ctx,<sp/>i,<sp/>4,<sp/>counts100);</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bo<sp/>=<sp/>(bo<sp/>||<sp/>span<sp/>==<sp/>-1);</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/>ok<sp/>(!bo,<sp/></highlight><highlight class="stringliteral">&quot;add_span<sp/>100000<sp/>more<sp/>(4<sp/>spans<sp/>overlap)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/>planner_destroy<sp/>(&amp;ctx);</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="493"><highlight class="normal">}</highlight></codeline>
<codeline lineno="494"><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>test_resource_service_flow<sp/>()</highlight></codeline>
<codeline lineno="496"><highlight class="normal">{</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rc<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>L1_size<sp/>=<sp/>9,<sp/>L2_size<sp/>=<sp/>3,<sp/>depth<sp/>=<sp/>50000;</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>bo<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>at<sp/>=<sp/>3600,<sp/>t<sp/>=<sp/>-1,<sp/>span<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>duration<sp/>=<sp/>1000;</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/>std::map&lt;int,<sp/>uint64_t&gt;<sp/>totals;</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/>std::map&lt;int,<sp/>const<sp/>char<sp/>*&gt;<sp/>types;</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;uint64_t&gt;<sp/>global_totals;</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;const<sp/>char<sp/>*&gt;<sp/>global_types;</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector<sp/>&lt;planner_t<sp/>*&gt;<sp/>locals;</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structplanner__t" kindref="compound">planner_t</ref><sp/>*global1<sp/>=<sp/>NULL,<sp/>*global2<sp/>=<sp/>NULL,<sp/>*global3<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/>std::stringstream<sp/>ss;</highlight></codeline>
<codeline lineno="509"><highlight class="normal"></highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/>types[0]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;A&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/>types[1]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;B&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/>types[2]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/>totals[0]<sp/>=<sp/>16;</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/>totals[1]<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/>totals[2]<sp/>=<sp/>32;</highlight></codeline>
<codeline lineno="516"><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;kv<sp/>:<sp/>types)</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>global_types.push_back<sp/>(strdup<sp/>(kv.second));</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;kv<sp/>:<sp/>totals)</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>global_totals.push_back<sp/>(L2_size<sp/>*<sp/>kv.second);</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>L1_size;<sp/>++i)</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>locals.push_back<sp/>(planner_new<sp/>(0,<sp/>INT64_MAX,<sp/>totals[i<sp/>%<sp/>L2_size],</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>types[i%L2_size]));</highlight></codeline>
<codeline lineno="524"><highlight class="normal"></highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/>global1<sp/>=<sp/>planner_new<sp/>(0,<sp/>INT64_MAX,<sp/>global_totals[0],<sp/>global_types[0]);</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/>global2<sp/>=<sp/>planner_new<sp/>(0,<sp/>INT64_MAX,<sp/>global_totals[1],<sp/>global_types[1]);</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/>global3<sp/>=<sp/>planner_new<sp/>(0,<sp/>INT64_MAX,<sp/>global_totals[2],<sp/>global_types[2]);</highlight></codeline>
<codeline lineno="528"><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Update<sp/>both<sp/>local/global<sp/>planners<sp/>for<sp/>allocation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>L1_size;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structplanner__t" kindref="compound">planner_t</ref><sp/>*global<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>planner_add_span<sp/>(locals[i],<sp/>at,<sp/>duration,<sp/>totals[i<sp/>%<sp/>L2_size]);</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!strcmp<sp/>(types[i<sp/>%<sp/>L2_size],<sp/>global_types[0]))</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>global<sp/>=<sp/>global1;</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!strcmp<sp/>(types[i<sp/>%<sp/>L2_size],<sp/>global_types[1]))</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>global<sp/>=<sp/>global2;</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!strcmp<sp/>(types[i<sp/>%<sp/>L2_size],<sp/>global_types[2]))</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>global<sp/>=<sp/>global3;</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>planner_add_span<sp/>(global,<sp/>at,<sp/>duration,<sp/>totals[i<sp/>%<sp/>L2_size]);</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/>at<sp/>+=<sp/>1000;</highlight></codeline>
<codeline lineno="542"><highlight class="normal"></highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Update<sp/>both<sp/>local/global<sp/>planners<sp/>for<sp/>reservation<sp/>with<sp/>a<sp/>large<sp/>depth</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>depth;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structplanner__t" kindref="compound">planner_t</ref><sp/>*global<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>i<sp/>%<sp/>L2_size;</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k<sp/>=<sp/>i<sp/>%<sp/>L1_size;</highlight></codeline>
<codeline lineno="548"><highlight class="normal"></highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Determine<sp/>the<sp/>earliest<sp/>scheduleable<sp/>point<sp/>on<sp/>or<sp/>after<sp/>the<sp/>time,<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!strcmp<sp/>(types[i<sp/>%<sp/>L2_size],<sp/>global_types[0]))</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>global<sp/>=<sp/>global1;</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!strcmp<sp/>(types[i<sp/>%<sp/>L2_size],<sp/>global_types[1]))</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>global<sp/>=<sp/>global2;</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!strcmp<sp/>(types[i<sp/>%<sp/>L2_size],<sp/>global_types[2]))</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>global<sp/>=<sp/>global3;</highlight></codeline>
<codeline lineno="556"><highlight class="normal"></highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>=<sp/>planner_avail_time_first<sp/>(global,<sp/>at,<sp/>duration,<sp/>totals[j]);</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bo<sp/>=<sp/>(bo<sp/>||<sp/>t<sp/>!=<sp/>(int64_t)(at<sp/>+<sp/>(i/L1_size)*duration));</highlight></codeline>
<codeline lineno="559"><highlight class="normal"></highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Descend/Reserve<sp/>lower-level<sp/>resource<sp/>at<sp/>this<sp/>schedule<sp/>point</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rc<sp/>=<sp/>planner_avail_during<sp/>(locals[k],<sp/>t,<sp/>duration,<sp/>totals[j]);</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bo<sp/>=<sp/>(bo<sp/>||<sp/>rc<sp/>==<sp/>-1);</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>span<sp/>=<sp/>planner_add_span<sp/>(locals[k],<sp/>t,<sp/>duration,<sp/>totals[j]);</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bo<sp/>=<sp/>(bo<sp/>||<sp/>span<sp/>==<sp/>-1);</highlight></codeline>
<codeline lineno="565"><highlight class="normal"></highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>back<sp/>to<sp/>global<sp/>on<sp/>postorder<sp/>visit<sp/>and<sp/>update<sp/>the<sp/>aggregate<sp/>info</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>span<sp/>=<sp/>planner_add_span<sp/>(global,<sp/>t,<sp/>duration,<sp/>totals[j]);</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bo<sp/>=<sp/>(bo<sp/>||<sp/>span<sp/>==<sp/>-1);</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/>ok<sp/>(!bo,<sp/></highlight><highlight class="stringliteral">&quot;reserve<sp/>%d<sp/>jobs<sp/>for<sp/>global/local<sp/>planners&quot;</highlight><highlight class="normal">,<sp/>depth);</highlight></codeline>
<codeline lineno="571"><highlight class="normal"></highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;type<sp/>:<sp/>global_types)</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free<sp/>((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)type);</highlight></codeline>
<codeline lineno="574"><highlight class="normal"></highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/>planner_destroy<sp/>(&amp;global1);</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/>planner_destroy<sp/>(&amp;global2);</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/>planner_destroy<sp/>(&amp;global3);</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;p<sp/>:<sp/>locals)</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>planner_destroy<sp/>(&amp;p);</highlight></codeline>
<codeline lineno="580"><highlight class="normal"></highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="582"><highlight class="normal">}</highlight></codeline>
<codeline lineno="583"><highlight class="normal"></highlight></codeline>
<codeline lineno="584"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>test_more_add_remove<sp/>()</highlight></codeline>
<codeline lineno="585"><highlight class="normal">{</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rc;</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>span1<sp/>=<sp/>-1,<sp/>span2<sp/>=<sp/>-1,<sp/>span3<sp/>=<sp/>-1,<sp/>span4<sp/>=<sp/>-1,<sp/>span5<sp/>=<sp/>-1,</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>span6<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>bo<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>resource_total<sp/>=<sp/>100000;</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>resource1<sp/>=<sp/>36;</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>resource2<sp/>=<sp/>3600;</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>resource3<sp/>=<sp/>1800;</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>resource4<sp/>=<sp/>1152;</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>resource5<sp/>=<sp/>2304;</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>resource6<sp/>=<sp/>468;</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>resource_type[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;core&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structplanner__t" kindref="compound">planner_t</ref><sp/>*ctx<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/>std::stringstream<sp/>ss;</highlight></codeline>
<codeline lineno="600"><highlight class="normal"></highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/>to_stream<sp/>(0,<sp/>INT64_MAX,<sp/>resource_total,<sp/>resource_type,<sp/>ss);</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/>ctx<sp/>=<sp/>planner_new<sp/>(0,<sp/>INT64_MAX,<sp/>resource_total,<sp/>resource_type);</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/>ok<sp/>(ctx<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;new<sp/>with<sp/>(%s)&quot;</highlight><highlight class="normal">,<sp/>ss.str<sp/>().c_str<sp/>());</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/>ss.str<sp/>(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="605"><highlight class="normal"></highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/>span1<sp/>=<sp/>planner_add_span<sp/>(ctx,<sp/>0,<sp/>600,<sp/>resource1);</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/>bo<sp/>=<sp/>(bo<sp/>||<sp/>span1<sp/>==<sp/>-1);</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/>span2<sp/>=<sp/>planner_add_span<sp/>(ctx,<sp/>0,<sp/>57600,<sp/>resource2);</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/>bo<sp/>=<sp/>(bo<sp/>||<sp/>span2<sp/>==<sp/>-1);</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/>span3<sp/>=<sp/>planner_add_span<sp/>(ctx,<sp/>57600,<sp/>57600,<sp/>resource3);</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/>bo<sp/>=<sp/>(bo<sp/>||<sp/>span3<sp/>==<sp/>-1);</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/>span4<sp/>=<sp/>planner_add_span<sp/>(ctx,<sp/>115200,<sp/>57600,<sp/>resource4);</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/>bo<sp/>=<sp/>(bo<sp/>||<sp/>span4<sp/>==<sp/>-1);</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/>span5<sp/>=<sp/>planner_add_span<sp/>(ctx,<sp/>172800,<sp/>57600,<sp/>resource5);</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/>bo<sp/>=<sp/>(bo<sp/>||<sp/>span5<sp/>==<sp/>-1);</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/>span6<sp/>=<sp/>planner_add_span<sp/>(ctx,<sp/>115200,<sp/>900,<sp/>resource6);</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/>bo<sp/>=<sp/>(bo<sp/>||<sp/>span6<sp/>==<sp/>-1);</highlight></codeline>
<codeline lineno="618"><highlight class="normal"></highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/>rc<sp/>=<sp/>planner_rem_span<sp/>(ctx,<sp/>span1);</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/>bo<sp/>=<sp/>(bo<sp/>||<sp/>rc<sp/>==<sp/>-1);</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/>rc<sp/>=<sp/>planner_rem_span<sp/>(ctx,<sp/>span2);</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/>bo<sp/>=<sp/>(bo<sp/>||<sp/>rc<sp/>==<sp/>-1);</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/>rc<sp/>=<sp/>planner_rem_span<sp/>(ctx,<sp/>span3);</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/>bo<sp/>=<sp/>(bo<sp/>||<sp/>rc<sp/>==<sp/>-1);</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/>rc<sp/>=<sp/>planner_rem_span<sp/>(ctx,<sp/>span4);</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/>bo<sp/>=<sp/>(bo<sp/>||<sp/>rc<sp/>==<sp/>-1);</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/>rc<sp/>=<sp/>planner_rem_span<sp/>(ctx,<sp/>span5);</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/>bo<sp/>=<sp/>(bo<sp/>||<sp/>rc<sp/>==<sp/>-1);</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/>rc<sp/>=<sp/>planner_rem_span<sp/>(ctx,<sp/>span6);</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/>bo<sp/>=<sp/>(bo<sp/>||<sp/>rc<sp/>==<sp/>-1);</highlight></codeline>
<codeline lineno="631"><highlight class="normal"></highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/>span1<sp/>=<sp/>planner_add_span<sp/>(ctx,<sp/>0,<sp/>600,<sp/>resource1);</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/>bo<sp/>=<sp/>(bo<sp/>||<sp/>span1<sp/>==<sp/>-1);</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/>span2<sp/>=<sp/>planner_add_span<sp/>(ctx,<sp/>0,<sp/>57600,<sp/>resource2);</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/>bo<sp/>=<sp/>(bo<sp/>||<sp/>span2<sp/>==<sp/>-1);</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/>span3<sp/>=<sp/>planner_add_span<sp/>(ctx,<sp/>57600,<sp/>57600,<sp/>resource3);</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/>bo<sp/>=<sp/>(bo<sp/>||<sp/>span3<sp/>==<sp/>-1);</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/>span4<sp/>=<sp/>planner_add_span<sp/>(ctx,<sp/>115200,<sp/>57600,<sp/>resource4);</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/>bo<sp/>=<sp/>(bo<sp/>||<sp/>span4<sp/>==<sp/>-1);</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/>span5<sp/>=<sp/>planner_add_span<sp/>(ctx,<sp/>172800,<sp/>57600,<sp/>resource5);</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/>bo<sp/>=<sp/>(bo<sp/>||<sp/>span5<sp/>==<sp/>-1);</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/>span6<sp/>=<sp/>planner_add_span<sp/>(ctx,<sp/>115200,<sp/>900,<sp/>resource6);</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/>bo<sp/>=<sp/>(bo<sp/>||<sp/>span6<sp/>==<sp/>-1);</highlight></codeline>
<codeline lineno="644"><highlight class="normal"></highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/>ok<sp/>(!bo,<sp/></highlight><highlight class="stringliteral">&quot;more<sp/>add-remove-add<sp/>test<sp/>works&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="646"><highlight class="normal"></highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/>planner_destroy<sp/>(&amp;ctx);</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="649"><highlight class="normal">}</highlight></codeline>
<codeline lineno="650"><highlight class="normal"></highlight></codeline>
<codeline lineno="651"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>test_constructors_and_overload<sp/>()</highlight></codeline>
<codeline lineno="652"><highlight class="normal">{</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rc;</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>span;</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>bo<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>resource_total<sp/>=<sp/>100000;</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>resource1<sp/>=<sp/>36;</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>resource2<sp/>=<sp/>3600;</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>resource3<sp/>=<sp/>1800;</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>resource4<sp/>=<sp/>1152;</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>resource5<sp/>=<sp/>2304;</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>resource6<sp/>=<sp/>468;</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>resource_type[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;core&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structplanner__t" kindref="compound">planner_t</ref><sp/>*ctx<sp/>=<sp/>NULL,<sp/>*ctx2<sp/>=<sp/>NULL,<sp/>*ctx3<sp/>=<sp/>NULL,<sp/>*ctx4<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="665"><highlight class="normal"></highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/>ctx<sp/>=<sp/>planner_new<sp/>(0,<sp/>INT64_MAX,<sp/>resource_total,<sp/>resource_type);</highlight></codeline>
<codeline lineno="667"><highlight class="normal"></highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>some<sp/>spans</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/>planner_add_span<sp/>(ctx,<sp/>0,<sp/>600,<sp/>resource1);</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/>planner_add_span<sp/>(ctx,<sp/>0,<sp/>57600,<sp/>resource2);</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/>planner_add_span<sp/>(ctx,<sp/>57600,<sp/>57600,<sp/>resource3);</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/>span<sp/>=<sp/>planner_add_span<sp/>(ctx,<sp/>115200,<sp/>57600,<sp/>resource4);</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/>planner_add_span<sp/>(ctx,<sp/>172800,<sp/>57600,<sp/>resource5);</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/>planner_add_span<sp/>(ctx,<sp/>115200,<sp/>900,<sp/>resource6);</highlight></codeline>
<codeline lineno="675"><highlight class="normal"></highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/>bo<sp/>=<sp/>(bo<sp/>||<sp/>!(planners_equal<sp/>(ctx,<sp/>ctx)));</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/>ok<sp/>(!bo,<sp/></highlight><highlight class="stringliteral">&quot;populated<sp/>planner<sp/>should<sp/>equal<sp/>itself&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="678"><highlight class="normal"></highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/>ctx2<sp/>=<sp/>planner_new_empty<sp/>();</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/>bo<sp/>=<sp/>(bo<sp/>||<sp/>!(planners_equal<sp/>(ctx2,<sp/>ctx2)));</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/>ok<sp/>(!bo,<sp/></highlight><highlight class="stringliteral">&quot;empty<sp/>planner<sp/>should<sp/>equal<sp/>itself&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="682"><highlight class="normal"></highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/>bo<sp/>=<sp/>(bo<sp/>||<sp/>planners_equal<sp/>(ctx,<sp/>ctx2));</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/>ok<sp/>(!bo,<sp/></highlight><highlight class="stringliteral">&quot;empty<sp/>planner<sp/>should<sp/>not<sp/>equal<sp/>populated<sp/>planner&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="685"><highlight class="normal"></highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/>ctx3<sp/>=<sp/>planner_new_empty<sp/>();</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/>bo<sp/>=<sp/>(bo<sp/>||<sp/>!planners_equal<sp/>(ctx2,<sp/>ctx3));</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/>ok<sp/>(!bo,<sp/></highlight><highlight class="stringliteral">&quot;empty<sp/>planners<sp/>should<sp/>be<sp/>equal&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="689"><highlight class="normal"></highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/>planner_assign<sp/>(ctx2,<sp/>ctx);</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/>planner_assign<sp/>(ctx3,<sp/>ctx2);</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/>bo<sp/>=<sp/>(bo<sp/>||<sp/>!(planners_equal<sp/>(ctx2,<sp/>ctx3)));</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/>bo<sp/>=<sp/>(bo<sp/>||<sp/>!(planners_equal<sp/>(ctx,<sp/>ctx2)));</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/>ok<sp/>(!bo,<sp/></highlight><highlight class="stringliteral">&quot;test<sp/>assignment<sp/>overload&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="695"><highlight class="normal"></highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/>planner_reset<sp/>(ctx3,<sp/>0,<sp/>INT64_MAX);</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/>bo<sp/>=<sp/>(bo<sp/>||<sp/>planners_equal<sp/>(ctx2,<sp/>ctx3));</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/>ok<sp/>(!bo,<sp/></highlight><highlight class="stringliteral">&quot;ensure<sp/>planner<sp/>reset<sp/>works<sp/>as<sp/>intended&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="699"><highlight class="normal"></highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/>ctx4<sp/>=<sp/>planner_copy<sp/>(ctx2);</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/>bo<sp/>=<sp/>(bo<sp/>||<sp/>!(planners_equal<sp/>(ctx2,<sp/>ctx4)));</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/>ok<sp/>(!bo,<sp/></highlight><highlight class="stringliteral">&quot;test<sp/>copy<sp/>constructor&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="703"><highlight class="normal"></highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/>bo<sp/>=<sp/>(bo<sp/>||<sp/>!(planners_equal<sp/>(ctx,<sp/>ctx2)));</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/>ok<sp/>(!bo,<sp/></highlight><highlight class="stringliteral">&quot;test<sp/>copy<sp/>constructor<sp/>doesn&apos;t<sp/>mutate<sp/>planner&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="706"><highlight class="normal"></highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/>rc<sp/>=<sp/>planner_rem_span<sp/>(ctx2,<sp/>span);</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/>bo<sp/>=<sp/>(bo<sp/>||<sp/>(planners_equal<sp/>(ctx2,<sp/>ctx4))<sp/>||<sp/>rc<sp/>==<sp/>-1);</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/>ok<sp/>(!bo,<sp/></highlight><highlight class="stringliteral">&quot;compare<sp/>planners<sp/>after<sp/>mutation&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="710"><highlight class="normal"></highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/>planner_assign<sp/>(ctx4,<sp/>ctx2);</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/>bo<sp/>=<sp/>(bo<sp/>||<sp/>!(planners_equal<sp/>(ctx2,<sp/>ctx4)));</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/>ok<sp/>(!bo,<sp/></highlight><highlight class="stringliteral">&quot;assignment<sp/>overload<sp/>works<sp/>on<sp/>planners<sp/>with<sp/>state&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="714"><highlight class="normal"></highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/>planner_destroy<sp/>(&amp;ctx);</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/>ctx<sp/>=<sp/>planner_copy<sp/>(ctx4);</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/>bo<sp/>=<sp/>(bo<sp/>||<sp/>!(planners_equal<sp/>(ctx,<sp/>ctx4)));</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/>ok<sp/>(!bo,<sp/></highlight><highlight class="stringliteral">&quot;copy<sp/>constructor<sp/>works<sp/>on<sp/>planners<sp/>with<sp/>state&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="719"><highlight class="normal"></highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/>bo<sp/>=<sp/>(bo<sp/>||<sp/>!(planner_avail_resources_at<sp/>(ctx,<sp/>57600)<sp/>==</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>planner_avail_resources_at<sp/>(ctx4,<sp/>57600)));</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/>ok<sp/>(!bo,<sp/></highlight><highlight class="stringliteral">&quot;test<sp/>for<sp/>avail<sp/>time<sp/>equality&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="723"><highlight class="normal"></highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/>planner_destroy<sp/>(&amp;ctx);</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/>planner_destroy<sp/>(&amp;ctx2);</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/>planner_destroy<sp/>(&amp;ctx3);</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/>planner_destroy<sp/>(&amp;ctx4);</highlight></codeline>
<codeline lineno="728"><highlight class="normal"></highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="730"><highlight class="normal">}</highlight></codeline>
<codeline lineno="731"><highlight class="normal"></highlight></codeline>
<codeline lineno="732"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>test_update<sp/>()</highlight></codeline>
<codeline lineno="733"><highlight class="normal">{</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rc;</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>span;</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>bo<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>resource_total<sp/>=<sp/>100000;</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>resource1<sp/>=<sp/>36;</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>resource2<sp/>=<sp/>3600;</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>resource3<sp/>=<sp/>1800;</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>resource4<sp/>=<sp/>2304;</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>resource5<sp/>=<sp/>468;</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>resource6<sp/>=<sp/>50000;</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>avail,<sp/>avail1<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>resource_type[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;core&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structplanner__t" kindref="compound">planner_t</ref><sp/>*ctx<sp/>=<sp/>NULL,<sp/>*ctx2<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="747"><highlight class="normal"></highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/>ctx<sp/>=<sp/>planner_new<sp/>(0,<sp/>INT64_MAX,<sp/>resource_total,<sp/>resource_type);</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>some<sp/>spans</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/>planner_add_span<sp/>(ctx,<sp/>0,<sp/>600,<sp/>resource1);</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/>planner_add_span<sp/>(ctx,<sp/>0,<sp/>57600,<sp/>resource2);</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/>planner_add_span<sp/>(ctx,<sp/>57600,<sp/>57600,<sp/>resource3);</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/>planner_add_span<sp/>(ctx,<sp/>172800,<sp/>57600,<sp/>resource4);</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/>planner_add_span<sp/>(ctx,<sp/>115200,<sp/>900,<sp/>resource5);</highlight></codeline>
<codeline lineno="755"><highlight class="normal"></highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/>avail<sp/>=<sp/>planner_avail_resources_at<sp/>(ctx,<sp/>0);</highlight></codeline>
<codeline lineno="757"><highlight class="normal"></highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/>ctx2<sp/>=<sp/>planner_copy<sp/>(ctx);</highlight></codeline>
<codeline lineno="759"><highlight class="normal"></highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/>rc<sp/>=<sp/>planner_update_total<sp/>(ctx,<sp/>100000);</highlight></codeline>
<codeline lineno="761"><highlight class="normal"></highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/>bo<sp/>=<sp/>(bo<sp/>||<sp/>!(planners_equal<sp/>(ctx,<sp/>ctx)));</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/>ok<sp/>(!bo,<sp/></highlight><highlight class="stringliteral">&quot;update<sp/>with<sp/>same<sp/>resource<sp/>count<sp/>shouldn&apos;t<sp/>change<sp/>planner&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="764"><highlight class="normal"></highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/>rc<sp/>=<sp/>planner_update_total<sp/>(ctx,<sp/>50000);</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/>avail1<sp/>=<sp/>planner_avail_resources_at<sp/>(ctx,<sp/>0);</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/>bo<sp/>=<sp/>(bo<sp/>||<sp/>!(planners_equal<sp/>(ctx,<sp/>ctx)));</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/>ok<sp/>(!bo,<sp/></highlight><highlight class="stringliteral">&quot;avail<sp/>difference<sp/>for<sp/>valid<sp/>reduction<sp/>is<sp/>correct&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="769"><highlight class="normal"></highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/>rc<sp/>=<sp/>planner_update_total<sp/>(ctx,<sp/>100000);</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/>bo<sp/>=<sp/>(bo<sp/>||<sp/>!(planners_equal<sp/>(ctx,<sp/>ctx2)));</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/>ok<sp/>(!bo,<sp/></highlight><highlight class="stringliteral">&quot;re-adding<sp/>resources<sp/>shouldn&apos;t<sp/>change<sp/>planner&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="773"><highlight class="normal"></highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/>rc<sp/>=<sp/>planner_update_total<sp/>(ctx,<sp/>40000);</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/>span<sp/>=<sp/>planner_add_span<sp/>(ctx,<sp/>1152000,<sp/>57600,<sp/>resource6);</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/>bo<sp/>=<sp/>(bo<sp/>||<sp/>(planners_equal<sp/>(ctx,<sp/>ctx2))<sp/>||<sp/>span<sp/>!=<sp/>-1);</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/>ok<sp/>(!bo,<sp/></highlight><highlight class="stringliteral">&quot;reducing<sp/>resources<sp/>below<sp/>request<sp/>should<sp/>prevent<sp/>scheduling&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="778"><highlight class="normal"></highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/>planner_destroy<sp/>(&amp;ctx);</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/>planner_destroy<sp/>(&amp;ctx2);</highlight></codeline>
<codeline lineno="781"><highlight class="normal"></highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="783"><highlight class="normal">}</highlight></codeline>
<codeline lineno="784"><highlight class="normal"></highlight></codeline>
<codeline lineno="785"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*argv[])</highlight></codeline>
<codeline lineno="786"><highlight class="normal">{</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/>plan<sp/>(67);</highlight></codeline>
<codeline lineno="788"><highlight class="normal"></highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/>test_planner_getters<sp/>();</highlight></codeline>
<codeline lineno="790"><highlight class="normal"></highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/>test_basic_add_remove<sp/>();</highlight></codeline>
<codeline lineno="792"><highlight class="normal"></highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/>test_availability_checkers<sp/>();</highlight></codeline>
<codeline lineno="794"><highlight class="normal"></highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/>test_add_and_iterator<sp/>();</highlight></codeline>
<codeline lineno="796"><highlight class="normal"></highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/>test_on_or_after<sp/>();</highlight></codeline>
<codeline lineno="798"><highlight class="normal"></highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/>test_remove_more<sp/>();</highlight></codeline>
<codeline lineno="800"><highlight class="normal"></highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/>test_stress_fully_overlap<sp/>();</highlight></codeline>
<codeline lineno="802"><highlight class="normal"></highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/>test_stress_4spans_overlap<sp/>();</highlight></codeline>
<codeline lineno="804"><highlight class="normal"></highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/>test_resource_service_flow<sp/>();</highlight></codeline>
<codeline lineno="806"><highlight class="normal"></highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/>test_more_add_remove<sp/>();</highlight></codeline>
<codeline lineno="808"><highlight class="normal"></highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/><sp/>test_constructors_and_overload<sp/>();</highlight></codeline>
<codeline lineno="810"><highlight class="normal"></highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/><sp/>test_update<sp/>();</highlight></codeline>
<codeline lineno="812"><highlight class="normal"></highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/>done_testing<sp/>();</highlight></codeline>
<codeline lineno="814"><highlight class="normal"></highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EXIT_SUCCESS;</highlight></codeline>
<codeline lineno="816"><highlight class="normal">}</highlight></codeline>
<codeline lineno="817"><highlight class="normal"></highlight></codeline>
<codeline lineno="818"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="819"><highlight class="comment"><sp/>*<sp/>vi:<sp/>ts=4<sp/>sw=4<sp/>expandtab</highlight></codeline>
<codeline lineno="820"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/hobbs17/flux-sched/resource/planner/test/planner_test01.cpp"/>
  </compounddef>
</doxygen>
