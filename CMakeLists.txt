cmake_minimum_required(VERSION 3.12)
project(flux-sched VERSION 0.40.0 LANGUAGES CXX C)
# Option to Enable SPHINX
option( SPHINX "Enable SPHINX" OFF )

# Option to AS_HELP_STRING([--disable-docs
option( DOCS "Enable docs generation" OFF )

set(CMAKE_CXX_STANDARD 17 CACHE STRING "The C++ standard to use")
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

# The lines below will generate the config.h based on the options above
# The file will be in the ${CMAKE_BINARY_DIR} location
set(CONFIG_H ${CMAKE_BINARY_DIR}/config.h)
string(TIMESTAMP CURRENT_TIMESTAMP)
file(WRITE ${CONFIG_H} "/* WARNING: This file is auto-generated by CMake on ${CURRENT_TIMESTAMP}. DO NOT EDIT!!! */\n\n")

## !!! WARNING These are the defines that were defined regardless of an option.
## !!! Or the script couldn't match them. Match them accordingly, delete them or keep them
file(APPEND ${CONFIG_H} "/* Define _GNU_SOURCE so that we get all necessary prototypes */\n")
file(APPEND ${CONFIG_H} "#define _GNU_SOURCE 1 \n\n ")
include( GNUInstallDirs ) # convenience names for gnu-style directories
# RPATH setup
list( APPEND CMAKE_BUILD_RPATH ${CMAKE_BINARY_DIR}/resource )
list( APPEND CMAKE_INSTALL_RPATH ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR} )

# Setting the include directory for the application to find config.h
include_directories( ${CMAKE_BINARY_DIR} )
# Since we have created a config.h add a global define for it
add_definitions( "-DHAVE_CONFIG_H" )
add_definitions( [=[-DPACKAGE_VERSION="${CMAKE_PROJECT_VERSION}"]=] )

# We build a lot of shared libs, build them all with PIC
set(CMAKE_POSITION_INDEPENDENT_CODE ON)

# variable to store paths to add to module path for tests

list(APPEND CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/cmake)
list(APPEND CMAKE_PREFIX_PATH ${CMAKE_INSTALL_PREFIX})

# external dependencies
find_package(PkgConfig REQUIRED)
set(ENV{PKG_CONFIG_PATH} "$ENV{PKG_CONFIG_PATH}:${CMAKE_INSTALL_PREFIX}/lib/pkgconfig")
if(DEFINED FLUX_CORE_PREFIX)
  set(ENV{PKG_CONFIG_PATH} "${FLUX_CORE_PREFIX}/lib/pkgconfig:$ENV{PKG_CONFIG_PATH}")
endif()
find_package(FluxCore REQUIRED)
find_package(yaml-cpp REQUIRED)
find_package(Python 3.6...<4.0 COMPONENTS Interpreter Development) # 3.6 or higher
execute_process(
  COMMAND "${Python_EXECUTABLE}" -c "import sysconfig as sc; print(sc.get_path('purelib', vars={'base':'${CMAKE_INSTALL_PREFIX}'}))"
  OUTPUT_VARIABLE PYTHON_INSTALL_SITELIB
  OUTPUT_STRIP_TRAILING_WHITESPACE)
execute_process(
  COMMAND "${Python_EXECUTABLE}" -c "import sysconfig as sc; print(sc.get_path('platlib', vars={'platbase':'${CMAKE_INSTALL_PREFIX}'}))"
  OUTPUT_VARIABLE PYTHON_INSTALL_SITEARCH
  OUTPUT_STRIP_TRAILING_WHITESPACE)
pkg_check_modules(LIBEDIT REQUIRED IMPORTED_TARGET libedit)
pkg_check_modules(CZMQ REQUIRED IMPORTED_TARGET libczmq>=3.0.0)
pkg_check_modules(HWLOC REQUIRED IMPORTED_TARGET hwloc>=1.11.1)
pkg_check_modules(JANSSON REQUIRED IMPORTED_TARGET jansson>=2.10)

set(Boost_USE_STATIC_LIBS OFF)
set(Boost_USE_MULTITHREADED ON)
set(Boost_USE_STATIC_RUNTIME OFF)
find_package(Boost 1.50 REQUIRED COMPONENTS
  system
  filesystem
  graph
  regex)
message(STATUS "Boost version: ${Boost_VERSION}")

# Install paths
set(FLUX_CMD_DIR "${CMAKE_INSTALL_PREFIX}/libexec/cmd")
set(FLUX_LIB_DIR "${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}/flux")
set(FLUX_MOD_DIR "${FLUX_LIB_DIR}/modules")
set(FLUX_SHELL_PLUGIN_DIR "${FLUX_LIB_DIR}/shell/plugins")
set(FLUX_RC1_DIR "${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_SYSCONFDIR}/flux/rc1.d")
set(FLUX_RC3_DIR "${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_SYSCONFDIR}/flux/rc3.d")

if(CMAKE_PROJECT_NAME STREQUAL PROJECT_NAME)
  include(CTest)
endif()

### HELPERS
function(flux_find_python_module Name Version)
  execute_process(
    COMMAND ${Python_EXECUTABLE} -c "import ${Name}; print(${Name}.__version__)"
    RESULT_VARIABLE EXIT_CODE
    OUTPUT_VARIABLE MOD_VER
    OUTPUT_STRIP_TRAILING_WHITESPACE
    ERROR_QUIET
    # COMMAND_ECHO STDOUT
    )
  if(MOD_VER VERSION_GREATER_EQUAL Version)
    set(${Name}_MOD $MOD_VER)
  else()
    set(${Name}_MOD NOTFOUND)
    message(FATAL_ERROR "Python module ${Name} not found or version too low, need ${Version} got ${MOD_VER}")
  endif()
  return(PRESERVE ${Name}_MOD)
endfunction()
function(flux_add_shell_plugin TargetName)
  # This odd construction is as close as we can get to
  # generic argument forwarding
  set(options "NOINSTALL")
  set(oneValueArgs "")
  set(multiValueArgs "")

  cmake_parse_arguments(PARSE_ARGV 1 ARG
    "${options}" "${oneValueArgs}" "${multiValueArgs}")

  set(__argsQuoted)
  foreach(__item IN LISTS ARG_UNPARSED_ARGUMENTS)
    string(APPEND __argsQuoted " [==[${__item}]==]")
  endforeach()
  cmake_language(EVAL CODE "
  add_library(
    ${TargetName}
    MODULE
    # List these last so they can override things we set above
    ${__argsQuoted}
    )"
    )
  target_link_options(${TargetName} PRIVATE
    "LINKER:--version-script=${CMAKE_SOURCE_DIR}/flux-plugin.map")
  target_link_libraries(${TargetName} PRIVATE flux::core)
  if (NOT ARG_NOINSTALL)
    install(TARGETS ${TargetName}
      LIBRARY DESTINATION ${FLUX_SHELL_PLUGIN_DIR})
  endif()
  set_property(TARGET ${TargetName} PROPERTY PREFIX "")
endfunction()
function(flux_add_module TargetName)
  # This odd construction is as close as we can get to
  # generic argument forwarding
  set(options "")
  set(oneValueArgs "")
  set(multiValueArgs "")

  cmake_parse_arguments(PARSE_ARGV 1 ARG
    "${options}" "${oneValueArgs}" "${multiValueArgs}")

  set(__argsQuoted)
  foreach(__item IN LISTS ARG_UNPARSED_ARGUMENTS)
    string(APPEND __argsQuoted " [==[${__item}]==]")
  endforeach()
  cmake_language(EVAL CODE "
  flux_add_shell_plugin(
    ${TargetName}
    NOINSTALL
    # List these last so they can override things we set above
    ${__argsQuoted}
    )"
    )
  install(TARGETS ${TargetName}
    LIBRARY DESTINATION ${FLUX_MOD_DIR})
  target_link_options(${TargetName} PRIVATE
    "LINKER:--version-script=${CMAKE_SOURCE_DIR}/flux-plugin.map" "LINKER:--no-undefined")
endfunction()
function(flux_add_test)
  # This odd construction is as close as we can get to
  # generic argument forwarding
  set(options "")
  set(oneValueArgs "")
  set(multiValueArgs "")

  cmake_parse_arguments(PARSE_ARGV 1 ARG
    "${options}" "${oneValueArgs}" "${multiValueArgs}")

  set(__argsQuoted)
  foreach(__item IN LISTS ARG_UNPARSED_ARGUMENTS)
    string(APPEND __argsQuoted " [==[${__item}]==]")
  endforeach()
  cmake_language(EVAL CODE "
  add_test(
    ${__argsQuoted}
    )"
    )
endfunction()
### END HELPERS
flux_find_python_module(yaml 3.10)
flux_find_python_module(jsonschema 2.3.0)

include_directories(.)
add_subdirectory( etc )
add_subdirectory( src )
add_subdirectory( resource )
add_subdirectory( qmanager )
# add_subdirectory( doc )
# add_subdirectory( etc )
add_subdirectory( t )
